Módulo 3
En este módulo, aprenderás sobre:

Datos de tipo booleano.
Operadores relacionales.
Cómo tomar decisiones en Python (if, if-else, if-elif, else).
Cómo repetir la ejecución de código usando los bucles (while, for).
Cómo realizar operaciones lógicas y de bit a bit en Python.
Listas en Python (construcción, indexación y segmentación; manipulación de contenido).
Cómo ordenar una lista usando algoritmos de clasificación de burbujas.
Listas multidimensionales y sus aplicaciones.
Preguntas y respuestas
Un programador escribe un programa y el programa hace preguntas.

Una computadora ejecuta el programa y proporciona las respuestas. El programa debe ser capaz de reaccionar de acuerdo con las respuestas recibidas.

Afortunadamente, las computadoras solo conocen dos tipos de respuestas:

Si, es cierto.
No, esto es falso.
Nunca obtendrás una respuesta como Déjame pensar..., no lo sé, o probablemente sí, pero no lo sé con seguridad.

Para hacer preguntas, Python utiliza un conjunto de operadores muy especiales. Revisemos uno tras otro, ilustrando sus efectos en algunos ejemplos simples.


Comparación: operador de igualdad
Pregunta: ¿Son dos valores iguales?

Para hacer esta pregunta, se utiliza el == operador (igual igual).

No olvides esta importante distinción:

= es un operador de asignación, por ejemplo, a = b assigna a la varable a el valor de b.
== es una pregunta ¿Son estos valores iguales? así que a == b compara a y b.
Es un operador binario con enlazado del lado izquierdo. Necesita dos argumentos y verifica si son iguales.

Ejercicios
Ahora vamos a hacer algunas preguntas. Intenta adivinar las respuestas.

Pregunta #1: ¿Cuál es el resultado de la siguiente comparación?

2 == 2    Revisar

True - por supuesto, 2 es igual a 2. Python responderá True (recuerda este par de literales predefinidos, True y False - también son palabras clave reservadas de Python).

Pregunta #2: ¿Cuál es el resultado de la siguiente comparación?

2 == 2    Revisar

Esta pregunta no es tan fácil como la primera. Por suerte, Python es capaz de convertir el valor entero en su equivalente real, y en consecuencia, la respuesta es True.

Pregunta #3: ¿Cuál es el resultado de la siguiente comparación?

1 == 2    Revisar

Esto debería ser fácil. La respuesta será (o mejor dicho, siempre es) False.

Igualdad: El operador igual a (==)
El operador == (igual a) compara los valores de dos operandos. Si son iguales, el resultado de la comparación es True. Si no son iguales, el resultado de la comparación es False.

Observa la comparación de igualdad a continuación: ¿Cuál es el resultado de esta operación?

var == 0


Toma en cuenta que no podemos encontrar la respuesta si no sabemos qué valor está almacenado actualmente en la variable var.

Si la variable se ha cambiado muchas veces durante la ejecución del programa, o si se ingresa su valor inicial desde la consola, Python solo puede responder a esta pregunta en el tiempo de ejecución del programa.

Ahora imagina a un programador que sufre de insomnio, y tiene que contar las ovejas negras y blancas por separado siempre y cuando haya exactamente el doble de ovejas negras que de las blancas.

La pregunta será la siguiente:

black_sheep == 2 * white_sheep


Debido a la baja prioridad del operador ==, la pregunta será tratada como la siguiente:

black_sheep == (2 * white_sheep)


Entonces, vamos a practicar la comprensión del operador == - ¿Puedes adivinar la salida del código a continuación?

var = 0   # asignando 0 a var
print(var == 0)

var = 1  # asignando 1 a var
print(var == 0)


Ejecuta el código y comprueba si tenías razón.

Desigualdad: el operador no es igual a (!=)
El operador != (no es igual a) también compara los valores de dos operandos. Aquí está la diferencia: si son iguales, el resultado de la comparación es False. Si no son iguales, el resultado de la comparación es True.

Ahora echa un vistazo a la comparación de desigualdad a continuación: ¿Puedes adivinar el resultado de esta operación?

var = 0 # asignando 0 a var
print(var != 0)

var = 1 # asignando 1 a var
print(var != 0)

Ejecuta el código y comprueba si tenías razón.

Operadores de comparación: mayor que
También se puede hacer una pregunta de comparación usando el operador > (mayor que).

Si deseas saber si hay más ovejas negras que blancas, puedes escribirlo de la siguiente manera:

black_sheep > white_sheep  # mayor que


True lo confirma; False lo niega.


Operadores de comparación: mayor o igual que
El operador mayor que tiene otra variante especial, una variante no estricta, pero se denota de manera diferente que la notación aritmética clásica: >= (mayor o igual que).

Hay dos signos subsecuentes, no uno.

Ambos operadores (estrictos y no estrictos), así como los otros dos que se analizan en la siguiente sección, son operadores binarios con enlace del lado izquierdo, y su prioridad es mayor que la mostrada por == y !=.

Si queremos saber si tenemos que usar un gorro o no, nos hacemos la siguiente pregunta:

centigrade_outside ≥ 0.0  # mayor o igual que


Operadores de comparación: menor o igual que
Como probablemente ya hayas adivinado, los operadores utilizados en este caso son: El operador < (menor que) y su hermano no estricto: <= (menor o igual que).

Observa este ejemplo simple:

current_velocity_mph < 85  # Menor que
current_velocity_mph ≤ 85  # Menor o igual que


Vamos a comprobar si existe un riesgo de ser multados por la ley (la primera pregunta es estricta, la segunda no).

Haciendo uso de las respuestas
¿Qué puedes hacer con la respuesta (es decir, el resultado de una operación de comparación) que se obtiene de la computadora?

Existen al menos dos posibilidades: primero, puedes memorizarlo (almacenarlo en una variable) y utilizarlo más tarde. ¿Cómo haces eso? Bueno, utilizarías una variable arbitraria como esta:

answer = number_of_lions >= number_of_lionesses


El contenido de la variable te dirá la respuesta a la pregunta.


La segunda posibilidad es más conveniente y mucho más común: puedes utilizar la respuesta que obtengas para tomar una decisión sobre el futuro del programa.

Necesitas una instrucción especial para este propósito, y la discutiremos muy pronto.

Ahora necesitamos actualizar nuestra tabla de prioridades, y poner todos los nuevos operadores en ella. Ahora se ve como a continuación:

Prioridad	Operador	
1	+, -	unario
2	**	
3	*, /, //, %	
4	+, -	binario
5	<, <=, >, >=	
6	==, !=

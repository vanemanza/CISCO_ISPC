Métodos a detalle
Resumamos todos los hechos relacionados con el uso de métodos en las clases de Python.

Como ya sabes, un método es una función que está dentro de una clase.

Existe un requisito fundamental: un método está obligado a tener al menos un parámetro (no existen métodos sin parámetros; un método puede invocarse sin un argumento, pero no puede declararse sin parámetros).

El primer (o único) parámetro generalmente se denomina self. Te sugerimos que lo sigas nombrando de esta manera, darle otros nombres puede causar sorpresas inesperadas.

El nombre self sugiere el propósito del parámetro: identifica el objeto para el cual se invoca el método.

Si vas a invocar un método, no debes pasar el argumento para el parámetro self, Python lo configurará por ti.

El ejemplo en el editor muestra la diferencia.

El código da como salida:

método
salida

Toma en cuenta la forma en que hemos creado el objeto, hemos tratado el nombre de la clase como una función, y devuelve un objeto recién instanciado de la clase.

Si deseas que el método acepte parámetros distintos a self, debes:

Colocarlos después de self en la definición del método.
Pasarlos como argumentos durante la invocación sin especificar self.
Justo como aqui:

class Classy:
    def method(self, par):
        print("método:", par)


obj = Classy()
obj.method(1)
obj.method(2)
obj.method(3)


El código da como salida:

método: 1
método: 2
método: 3

class Classy:
    def method(self):
        print("método")


obj = Classy()
obj.method()

Métodos a detalle: continuación
El parámetro self es usado para obtener acceso a la instancia del objeto y las variables de clase.

El ejemplo muestra ambas formas de utilizar el parámetro self:

class Classy:
    varia = 2
    def method(self):
        print(self.varia, self.var)


obj = Classy()
obj.var = 3
obj.method()


El código da como salida:

2 3
salida

El parámetro self también se usa para invocar otros métodos desde dentro de la clase.

Justo como aquí:

class Classy:
    def other(self):
        print("otro")

    def method(self):
        print("método")
        self.other()


obj = Classy()
obj.method()


El código da como salida:

método
otro

Si se nombra un método de esta manera: __init__, no será un método regular, será un constructor.

Si una clase tiene un constructor, este se invoca automática e implícitamente cuando se instancia el objeto de la clase.

El constructor:

Esta obligado a tener el parámetro self (se configura automáticamente).
Pudiera (pero no necesariamente) tener mas parámetros que solo self; si esto sucede, la forma en que se usa el nombre de la clase para crear el objeto debe tener la definición __init__.
Se puede utilizar para configurar el objeto, es decir, inicializa adecuadamente su estado interno, crea variables de instancia, crea instancias de cualquier otro objeto si es necesario, etc.
Observa el código en el editor. El ejemplo muestra un constructor muy simple pero funcional.

Ejecútalo. El código da como salida:

objeto
salida

Ten en cuenta que el constructor:

No puede retornar un valor, ya que está diseñado para devolver un objeto recién creado y nada más.
No se puede invocar directamente desde el objeto o desde dentro de la clase (puedes invocar un constructor desde cualquiera de las superclases del objeto, pero discutiremos esto más adelante).


 
 Sandbox
Code
class Classy:
def __init__(self, value):
self.var = value


obj_1 = Classy("objeto")

print(obj_1.var)
class Classy:


Console 
class Classy:
    def __init__(self, value):
        self.var = value


obj_1 = Classy("objeto")

print(obj_1.var)

Como __init__ es un método, y un método es una función, puedes hacer los mismos trucos con constructores y métodos que con las funciones ordinarias.

El ejemplo en el editor muestra cómo definir un constructor con un valor de argumento predeterminado. Pruébalo.

El código da como salida:

objeto
None
salida

Todo lo que hemos dicho sobre el manejo de los nombres también se aplica a los nombres de métodos, un método cuyo nombre comienza con __ está (parcialmente) oculto.

El ejemplo muestra este efecto:

class Classy:
    def visible(self):
        print("visible")
    
    def __hidden(self):
        print("oculto")


obj = Classy()
obj.visible()

try:
    obj.__hidden()
except:
    print("fallido")

obj._Classy__hidden()


El código da como salida:

visible
fallido
oculto
salida

Ejecuta el programa y pruébalo.

class Classy:
    def __init__(self, value = None):
        self.var = value


obj_1 = Classy("objeto")
obj_2 = Classy()

print(obj_1.var)
print(obj_2.var)

La vida interna de clases y objetos
Cada clase de Python y cada objeto de Python está pre-equipado con un conjunto de atributos útiles que pueden usarse para examinar sus capacidades.

Ya conoces uno de estos: es la propiedad __dict__.

Observemos como esta propiedad trata con los métodos: mira el código en el editor.

Ejecútalo para ver que produce. Verifica el resultado.

Encuentra todos los métodos y atributos definidos. Localiza el contexto en el que existen: dentro del objeto o dentro de la clase.

class Classy:
    varia = 1
    def __init__(self):
        self.var = 2

    def method(self):
        pass

    def __hidden(self):
        pass


obj = Classy()

print(obj.__dict__)
print(Classy.__dict__)

La vida interna de clases y objetos: continuación
__dict__ es un diccionario. Otra propiedad incorporada que vale la pena mencionar es una cadena llamada __name__.

La propiedad contiene el nombre de la clase. No es nada emocionante, es solo una cadena.

Nota: el atributo __name__ está ausente del objeto, existe solo dentro de las clases.


Si deseas encontrar la clase de un objeto en particular, puedes usar una función llamada type(), la cual es capaz (entre otras cosas) de encontrar una clase que se haya utilizado para crear instancias de cualquier objeto.

Observa el código en el editor, ejecútalo y compruébalo tu mismo.

La salida del código es:

Classy
Classy
salida

Nota: algo como esto

print(obj.__name__)


causará un error.

class Classy:
    pass


print(Classy.__name__)
obj = Classy()
print(type(obj).__name__)

__module__ es una cadena, también almacena el nombre del módulo que contiene la definición de la clase.

Vamos a comprobarlo: ejecuta el código en el editor.

La salida del código es:

__main__
__main__
salida

Como sabes, cualquier módulo llamado __main__ en realidad no es un módulo, sino es el archivo actualmente en ejecución.

class Classy:
    pass


print(Classy.__module__)
obj = Classy()
print(obj.__module__)

__bases__ es una tupla. La tupla contiene clases (no nombres de clases) que son superclases directas de la clase.

El orden es el mismo que el utilizado dentro de la definición de clase.

Te mostraremos solo un ejemplo muy básico, ya que queremos resaltar cómo funciona la herencia.

Además, te mostraremos cómo usar este atributo cuando discutamos los aspectos orientados a objetos de las excepciones.

Nota: solo las clases tienen este atributo, los objetos no.

Hemos definido una función llamada printBases(), diseñada para presentar claramente el contenido de la tupla.

Observa el código en el editor. Ejecútalo. Su salida es:

( object )
( object )
( SuperOne SuperTwo )
salida

Nota: una clase sin superclases explícitas apunta a object (una clase de Python predefinida) como su antecesor directo.

class SuperOne:
    pass


class SuperTwo:
    pass


class Sub(SuperOne, SuperTwo):
    pass


def printBases(cls):
    print('( ', end='')

    for x in cls.__bases__:
        print(x.__name__, end=' ')
    print(')')


printBases(SuperOne)
printBases(SuperTwo)
printBases(Sub)

Reflexión e introspección
Todo esto permite que el programador de Python realice dos actividades importantes específicas para muchos lenguajes objetivos. Las cuales son:

Introspección, que es la capacidad de un programa para examinar el tipo o las propiedades de un objeto en tiempo de ejecución.
Reflexión, que va un paso más allá, y es la capacidad de un programa para manipular los valores, propiedades y/o funciones de un objeto en tiempo de ejecución.
En otras palabras, no tienes que conocer la definición completa de clase/objeto para manipular el objeto, ya que el objeto y/o su clase contienen los metadatos que te permiten reconocer sus características durante la ejecución del programa.

Investigando Clases
¿Qué puedes descubrir acerca de las clases en Python? La respuesta es simple: todo.

Tanto la reflexión como la introspección permiten al programador hacer cualquier cosa con cada objeto, sin importar de dónde provenga.

Analiza el código en el editor.

La función llamada incIntsI() toma un objeto de cualquier clase, escanea su contenido para encontrar todos los atributos enteros con nombres que comienzan con i, y los incrementa en uno.

¿Imposible? ¡De ninguna manera!

Así es como funciona:

La línea 1: define una clase muy simple...
Las líneas 3 a la 10: ... la llenan con algunos atributos.
La línea 12: ¡esta es nuestra función!
La línea 13: escanea el atributo __dict__, buscando todos los nombres de atributos.
La línea 14: si un nombre comienza con i...
La línea 15: ... utiliza la función getattr() para obtener su valor actual; nota: getattr() toma dos argumentos: un objeto y su nombre de propiedad (como una cadena) y devuelve el valor del atributo actual.
La línea 16: comprueba si el valor es de tipo entero, emplea la función isinstance() para este propósito (discutiremos esto más adelante).
La línea 17: si la comprobación sale bien, incrementa el valor de la propiedad haciendo uso de la función setattr(); la función toma tres argumentos: un objeto, el nombre de la propiedad (como una cadena) y el nuevo valor de la propiedad.
El código da como salida:

{'a': 1, 'integer': 4, 'b': 2, 'i': 3, 'z': 5, 'ireal': 3.5}
{'a': 1, 'integer': 5, 'b': 2, 'i': 4, 'z': 5, 'ireal': 3.5}
salida

¡Eso es todo!

class MyClass:
    pass


obj = MyClass()
obj.a = 1
obj.b = 2
obj.i = 3
obj.ireal = 3.5
obj.integer = 4
obj.z = 5


def incIntsI(obj):
    for name in obj.__dict__.keys():
        if name.startswith('i'):
            val = getattr(obj, name)
            if isinstance(val, int):
                setattr(obj, name, val + 1)


print(obj.__dict__)
incIntsI(obj)
print(obj.__dict__)

Puntos Clave

1. Un método es una función dentro de una clase. El primer (o único) parámetro de cada método se suele llamar self, que está diseñado para identificar al objeto para el que se invoca el método con el fin de acceder a las propiedades del objeto o invocar sus métodos.


2. Si una clase contiene un constructor (un método llamado __init__), este no puede devolver ningún valor y no se puede invocar directamente.


3. Todas las clases (pero no los objetos) contienen una propiedad llamada __name__, que almacena el nombre de la clase. Además, una propiedad llamada __module__ almacena el nombre del módulo en el que se ha declarado la clase, mientras que la propiedad llamada __bases__ es una tupla que contiene las superclases de una clase.

Por ejemplo:

class Sample:
    def __init__(self):
        self.name = Sample.__name__
    def myself(self):
        print("Mi nombre es " + self.name + " y vivo en " + Sample.__module__)


obj = Sample()
obj.myself()


El código da como salida:

Mi nombre es Sample y vivo en __main__


Ejercicio 1

La declaración de la clase Snake se muestra a continuación. Enriquece la clase con un método llamado increment(), el cual incrementa en 1 la propiedad victims.

class Snake:
    def __init__(self):
        self.victims = 0

Revisar
class Snake:
    def __init__(self):
        self.victims = 0

    def increment(self):
        self.victims += 1




Ejercicio 2

Redefine el constructur de la clase Snake para que tenga un parámetro que inicialice el campo victims con un valor pasado al objeto durante la construcción.


Revisar
class Snake:
    def __init__(self, victims):
        self.victims = victims	



Ejercicio 3

¿Puedes predecir el resultado del siguiente código?

class Snake:
    pass


class Python(Snake):
    pass


print(Python.__name__, 'es una', Snake.__name__)
print(Python.__bases__[0].__name__, 'puede ser una', Python.__name__)


Revisar
Python es una Snake
Snake puede ser una Python
